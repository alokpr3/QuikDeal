//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QD_Project1._0
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class QuickDealDBEntities1 : DbContext
    {
        public QuickDealDBEntities1()
            : base("name=QuickDealDBEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Ad_master> Ad_master { get; set; }
        public virtual DbSet<City_master> City_master { get; set; }
        public virtual DbSet<Province_Master> Province_Master { get; set; }
        public virtual DbSet<User_Master> User_Master { get; set; }
    
        public virtual int InsertUser(string userName, string password, string skey, string email, string contact, Nullable<decimal> province, Nullable<decimal> city, string postal_Code)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var skeyParameter = skey != null ?
                new ObjectParameter("skey", skey) :
                new ObjectParameter("skey", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var contactParameter = contact != null ?
                new ObjectParameter("Contact", contact) :
                new ObjectParameter("Contact", typeof(string));
    
            var provinceParameter = province.HasValue ?
                new ObjectParameter("Province", province) :
                new ObjectParameter("Province", typeof(decimal));
    
            var cityParameter = city.HasValue ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(decimal));
    
            var postal_CodeParameter = postal_Code != null ?
                new ObjectParameter("Postal_Code", postal_Code) :
                new ObjectParameter("Postal_Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUser", userNameParameter, passwordParameter, skeyParameter, emailParameter, contactParameter, provinceParameter, cityParameter, postal_CodeParameter);
        }
    
        public virtual ObjectResult<SelectProvince_Result> SelectProvince()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectProvince_Result>("SelectProvince");
        }
    
        public virtual ObjectResult<SelectCity_Result> SelectCity()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectCity_Result>("SelectCity");
        }
    }
}
